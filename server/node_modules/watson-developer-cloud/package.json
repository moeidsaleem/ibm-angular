{
  "_args": [
    [
      {
        "raw": "watson-developer-cloud",
        "scope": null,
        "escapedName": "watson-developer-cloud",
        "name": "watson-developer-cloud",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Atrix\\Projects\\zaryabFYP\\testing\\server"
    ]
  ],
  "_from": "watson-developer-cloud@latest",
  "_id": "watson-developer-cloud@3.1.1",
  "_inCache": true,
  "_location": "/watson-developer-cloud",
  "_nodeVersion": "8.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/watson-developer-cloud_3.1.1_1520544166816_0.0667695303567728"
  },
  "_npmUser": {
    "name": "germanattanasio",
    "email": "germanattanasio@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "watson-developer-cloud",
    "scope": null,
    "escapedName": "watson-developer-cloud",
    "name": "watson-developer-cloud",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/watson-developer-cloud/-/watson-developer-cloud-3.1.1.tgz",
  "_shasum": "faba2d98598f71c84ba6af486394e9687e4e94ef",
  "_shrinkwrap": null,
  "_spec": "watson-developer-cloud",
  "_where": "C:\\Atrix\\Projects\\zaryabFYP\\testing\\server",
  "author": {
    "name": "IBM Corp."
  },
  "bugs": {
    "url": "https://github.com/watson-developer-cloud/node-sdk/issues"
  },
  "contributors": [
    {
      "name": "German Attanasio Ruiz",
      "email": "germanatt@us.ibm.com"
    },
    {
      "name": "Nathan Friedly",
      "email": "nfriedly@us.ibm.com"
    },
    {
      "name": "Jeff Stylos",
      "email": "jsstylos@us.ibm.com"
    }
  ],
  "dependencies": {
    "@types/csv-stringify": "~1.4.2",
    "@types/extend": "~3.0.0",
    "@types/file-type": "~5.2.1",
    "@types/is-stream": "~1.1.0",
    "@types/node": "~9.4.5",
    "@types/request": "~2.47.0",
    "async": "~2.6.0",
    "buffer-from": "~0.1.1",
    "cookie": "~0.3.1",
    "csv-stringify": "~1.0.2",
    "extend": "~3.0.0",
    "file-type": "~7.5.0",
    "isstream": "~0.1.2",
    "mime-types": "~2.1.17",
    "object.omit": "~3.0.0",
    "object.pick": "~1.3.0",
    "request": "~2.83.0",
    "vcap_services": "~0.3.0",
    "websocket": "~1.0.25"
  },
  "description": "Client library to use the IBM Watson Services and AlchemyAPI",
  "devDependencies": {
    "browserify": "~16.0.0",
    "codecov": "~3.0.0",
    "concat-stream": "~1.6.0",
    "dependency-lint": "~5.0.1",
    "eslint": "~4.18.1",
    "eslint-config-google": "~0.9.1",
    "eslint-config-prettier": "~2.9.0",
    "eslint-plugin-node": "~6.0.0",
    "eslint-plugin-prettier": "~2.6.0",
    "husky": "~0.14.3",
    "jsdoc": "~3.5.5",
    "lint-staged": "~6.1.0",
    "memory-fs": "~0.4.1",
    "mocha": "~4.1.0",
    "nock": "~9.1.6",
    "nyc": "~11.4.1",
    "object.assign": "~4.1.0",
    "prettier": "1.10.2",
    "sinon": "~4.3.0",
    "tslint": "~5.9.1",
    "tslint-config-prettier": "~1.9.0",
    "tslint-eslint-rules": "~5.1.0",
    "typedoc": "~0.10.0",
    "typescript": "~2.7.1",
    "uglify-es": "~3.3.10",
    "watchify": "~3.10.0",
    "wav": "~1.0.0",
    "webpack": "~3.10.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-lRKcG9KpfWmk/xJdEkKenl+2xbz2pVCcE5TpsnhADcRJMDT0PL0Vz0HBOIuS4bzYbzCyxx9sQDG9JUMWCm4Viw==",
    "shasum": "faba2d98598f71c84ba6af486394e9687e4e94ef",
    "tarball": "https://registry.npmjs.org/watson-developer-cloud/-/watson-developer-cloud-3.1.1.tgz",
    "fileCount": 106,
    "unpackedSize": 5980053
  },
  "engines": {
    "node": ">=4"
  },
  "gitHead": "7f85bc074a06f6f3527c58e4222a964ef781fdd1",
  "homepage": "https://github.com/watson-developer-cloud/node-sdk#readme",
  "keywords": [
    "conversation",
    "dialog",
    "discovery",
    "ibm",
    "natural language classifier",
    "natural language understanding",
    "personality insights",
    "speech to text",
    "text to speech",
    "tone analyzer",
    "tone_analyzer",
    "visual recognition",
    "watson developer cloud",
    "watson",
    "wdc"
  ],
  "license": "Apache-2.0",
  "lint-staged": {
    "**/*.ts": [
      "tsc",
      "tslint --fix -p . -c tslint.json",
      "test-unit",
      "git add"
    ],
    "test/**/*.js": [
      "eslint --fix",
      "prettier --write",
      "test-unit",
      "git add"
    ],
    "examples/*.js": [
      "eslint --fix",
      "git add"
    ]
  },
  "main": "./index",
  "maintainers": [
    {
      "name": "anweshan",
      "email": "anweshanaskar@gmail.com"
    },
    {
      "name": "germanattanasio",
      "email": "germanattanasio@gmail.com"
    },
    {
      "name": "nfriedly",
      "email": "nathan@nfriedly.com"
    }
  ],
  "name": "watson-developer-cloud",
  "optionalDependencies": {},
  "readme": "# Watson APIs Node.js SDK\n\n[![Build Status](https://secure.travis-ci.org/watson-developer-cloud/node-sdk.svg)](http://travis-ci.org/watson-developer-cloud/node-sdk)\n[![Slack](https://wdc-slack-inviter.mybluemix.net/badge.svg)](https://wdc-slack-inviter.mybluemix.net)\n[![npm-version](https://img.shields.io/npm/v/watson-developer-cloud.svg)](https://www.npmjs.com/package/watson-developer-cloud)\n[![npm-downloads](https://img.shields.io/npm/dm/watson-developer-cloud.svg)](https://www.npmjs.com/package/watson-developer-cloud)\n\nNode.js client library to use the Watson APIs.\n\n<details>\n  <summary>Table of Contents</summary>\n\n  * [Installation](#installation)\n  * [Getting the Service Credentials](#getting-the-service-credentials)\n  * [Usage](#usage)\n  * [Client-side usage](#client-side-usage)\n  * [Data collection opt-out](#data-collection-opt-out)\n  * [Questions](#questions)\n  * [Examples](#examples)\n  * [IBM Watson Services](#ibm-watson-services)\n    * [Authorization](#authorization)\n    * [Conversation](#conversation)\n    * [Discovery](#discovery)\n    * [Language Translator](#language-translator)\n    * [Natural Language Classifier](#natural-language-classifier)\n    * [Natural Language Understanding](#natural-language-understanding)\n    * [Personality Insights](#personality-insights)\n    * [Speech to Text](#speech-to-text)\n    * [Text to Speech](#text-to-speech)\n    * [Tone Analyzer](#tone-analyzer)\n    * [Visual Recognition](#visual-recognition)\n  * [Composing Services](#composing-services)\n  * [Debug](#debug)\n  * [Tests](#tests)\n  * [License](#license)\n  * [Contributing](#contributing)\n\n</details>\n\n## Installation\n\n```sh\nnpm install watson-developer-cloud\n```\n\n## Getting the service credentials\n\nYou will need the `username`, `password`, and `url` (`api_key` for Visual Recognition) for each service. Service credentials are different from your IBM Cloud account username and password.\n\nTo get your service credentials, follow these steps:\n\n1.  Log in to IBM Cloud at https://console.bluemix.net/catalog/?category=watson.\n1.  In the IBM Cloud **Catalog**, select the service you want to use.\n1.  Type a unique name for the service instance in the **Service name** field. For example, type `my-service-name`. Leave the default values for the other options.\n1.  Click **Create**.\n1.  From the service dashboard, click **Service credentials**.\n1.  Click **View credentials** under **Actions**.\n1.  Copy `username`, `password` (or `api_key` for Visual Recognition), and `url`.\n\n## Usage\n\nThe examples below assume that you already have service credentials. If not,\nyou will have to create a service in [IBM Cloud][ibm_cloud].\n\nIf you are running your application in IBM Cloud, you don't need to specify the\ncredentials; the library will get them for you by looking at the `VCAP_SERVICES` environment variable.\n\nCredentials are checked for in the following order:\n\n1. Hard-coded or programatic credentials passed to the service constructor\n\n2. `SERVICE_NAME_USERNAME` and `SERVICE_NAME_PASSWORD` environment properties (or `SERVICE_NAME_API_KEY` when appropriate) and, optionally, `SERVICE_NAME_URL`\n\n3. IBM-Cloud-supplied credentials (via the `VCAP_SERVICES` JSON-encoded environment property)\n\n### Client-side usage\n\nSee the `examples/` folder for [Browserify](http://browserify.org/) and [Webpack](http://webpack.github.io/) client-side SDK examples (with server-side generation of auth tokens.)\n\nNote: not all services currently support CORS, and therefore not all services can be used client-side.\nOf those that do, most require an auth token to be generated server-side via the [Authorization Service](#authorization).\n\n### Data collection opt-out\n\nBy default, [all requests are logged](https://console.bluemix.net/docs/services/watson/getting-started-logging.html). This can be disabled of by setting the `X-Watson-Learning-Opt-Out` header when creating the service instance:\n\n```js\nvar myInstance = new watson.WhateverServiceV1({\n  /* username, password, version, url, etc... */\n  headers: {\n    \"X-Watson-Learning-Opt-Out\": true\n  }\n});\n```\n\n## Documentation\n\nYou can find links to the documentation at https://console.bluemix.net/developer/watson/documentation. Find the service that you're interested in, click **API reference**, and then select the **Node** tab.\n\nThere are also auto-generated JSDocs available at http://watson-developer-cloud.github.io/node-sdk/master/\n\n\n## Questions\n\nIf you are having difficulties using the APIs or have a question about the Watson services, please ask a question at [dW Answers](https://developer.ibm.com/answers/questions/ask/?topics=watson) or [Stack Overflow](http://stackoverflow.com/questions/ask?tags=ibm-watson-cognitive).\n\n## Examples\n\nThe [examples][examples] folder has basic and advanced examples.\n\n### Authorization\n\nThe Authorization service can generate auth tokens for situations where providing the service username/password is undesirable.\n\nTokens are valid for 1 hour and may be sent using the `X-Watson-Authorization-Token` header or the `watson-token` query param.\n\nNote that the token is supplied URL-encoded, and will not be accepted if it is double-encoded in a querystring.\n\n```javascript\nvar watson = require('watson-developer-cloud');\n\nvar authorization = new watson.AuthorizationV1({\n  username: '<Text to Speech username>',\n  password: '<Text to Speech password>',\n  url: 'https://stream.watsonplatform.net/authorization/api', // Speech tokens\n});\n\nauthorization.getToken({\n  url: 'https://stream.watsonplatform.net/text-to-speech/api'\n},\nfunction (err, token) {\n  if (!token) {\n    console.log('error:', err);\n  } else {\n    // Use your token here\n  }\n});\n```\n\n\n### Conversation\n\nUse the [Conversation][conversation] service to determine the intent of a message.\n\nNote: you must first create a workspace via Bluemix. See [the documentation](https://console.bluemix.net/docs/services/conversation/index.html#about) for details.\n\n```js\nvar ConversationV1 = require('watson-developer-cloud/conversation/v1');\n\nvar conversation = new ConversationV1({\n  username: '<username>',\n  password: '<password>',\n  url: 'https://gateway.watsonplatform.net/conversation/api/',\n  version: '2017-05-26'\n});\n\nconversation.message(\n  {\n    input: { text: \"What's the weather?\" },\n    workspace_id: '<workspace id>'\n  },\n  function(err, response) {\n    if (err) {\n      console.error(err);\n    } else {\n      console.log(JSON.stringify(response, null, 2));\n    }\n  }\n);\n```\n\n### Discovery\n\nUse the [Discovery Service][discovery] to search and analyze structured and unstructured data.\n\n```javascript\nvar DiscoveryV1 = require('watson-developer-cloud/discovery/v1');\n\nvar discovery = new DiscoveryV1({\n  username: '<username>',\n  password: '<password>',\n  url: 'https://gateway.watsonplatform.net/discovery/api/',\n  version: '2017-09-01'\n});\n\ndiscovery.query(\n  {\n    environment_id: '<environment_id>',\n    collection_id: '<collection_id>',\n    query: 'my_query'\n  },\n  function(err, response) {\n    if (err) {\n      console.error(err);\n    } else {\n      console.log(JSON.stringify(response, null, 2));\n    }\n  }\n);\n```\n\n\n### Language Translator\n\nTranslate text from one language to another or idenfity a language using the [Language Translator][language_translator] service.\n\n```javascript\nvar LanguageTranslatorV2 = require('watson-developer-cloud/language-translator/v2');\n\nvar languageTranslator = new LanguageTranslatorV2({\n  username: '<username>',\n  password: '<password>',\n  url: 'https://gateway.watsonplatform.net/language-translator/api/'\n});\n\nlanguageTranslator.translate(\n  {\n    text: 'A sentence must have a verb',\n    source: 'en',\n    target: 'es'\n  },\n  function(err, translation) {\n    if (err)  {\n      console.log('error:', err);\n    } else  {\n      console.log(JSON.stringify(translation, null, 2));\n  }\n);\n\nlanguageTranslator.identify(\n  {\n    text:\n      'The language translator service takes text input and identifies the language used.'\n  },\n  function(err, language) {\n    if (err)  {\n      console.log('error:', err);\n    } else {\n      console.log(JSON.stringify(language, null, 2));\n    }\n  }\n);\n```\n\n\n### Natural Language Classifier\n\nUse [Natural Language Classifier](https://console.bluemix.net/docs/services/natural-language-classifier/getting-started.html) service to create a classifier instance by providing a set of representative strings and a set of one or more correct classes for each as training. Then use the trained classifier to classify your new question for best matching answers or to retrieve next actions for your application.\n\n```javascript\nvar NaturalLanguageClassifierV1 = require('watson-developer-cloud/natural-language-classifier/v1');\n\nvar classifier = new NaturalLanguageClassifierV1({\n  username: '<username>',\n  password: '<password>',\n  url: 'https://gateway.watsonplatform.net/natural-language-classifier/api/'\n});\n\nclassifier.classify(\n  {\n    text: 'Is it sunny?',\n    classifier_id: '<classifier-id>'\n  },\n  function(err, response) {\n    if (err) {\n      console.log('error:', err);\n    } else {\n      console.log(JSON.stringify(response, null, 2));\n    }\n  }\n);\n```\n\nSee this [example](https://github.com/watson-developer-cloud/node-sdk/blob/master/examples/natural_language_classifier.v1.js) to learn how to create a classifier.\n\n\n### Natural Language Understanding\n\nUse Natural Language Understanding is a collection of natural language processing APIs that help you understand sentiment,\n keywords, entities, high-level concepts and more.\n\n```javascript\nvar fs = require('fs');\nvar NaturalLanguageUnderstandingV1 = require('watson-developer-cloud/natural-language-understanding/v1.js');\n\nvar nlu = new NaturalLanguageUnderstandingV1({\n  username: '<username>',\n  password: '<password>',\n  version: '2017-02-27',\n  url: 'https://gateway.watsonplatform.net/natural-language-understanding/api/'\n});\n\nnlu.analyze(\n  {\n    html: file_data, // Buffer or String\n    features: {\n      concepts: {},\n      keywords: {}\n    }\n  },\n  function(err, response) {\n    if (err) {\n      console.log('error:', err);\n    } else {\n      console.log(JSON.stringify(response, null, 2));\n    }\n  }\n);\n```\n\n\n### Personality Insights\n\nAnalyze text in English and get a personality profile by using the\n[Personality Insights][personality_insights] service.\n\n```javascript\nvar PersonalityInsightsV3 = require('watson-developer-cloud/personality-insights/v3');\n\nvar personalityInsights = new PersonalityInsightsV3({\n  username: '<username>',\n  password: '<password>',\n  version: '2016-10-19',\n  url: 'https://gateway.watsonplatform.net/personality-insights/api/'\n});\n\npersonalityInsights.profile(\n  {\n    content: 'Enter more than 100 unique words here...',\n    content_type: 'text/plain',\n    consumption_preferences: true\n  },\n  function(err, response) {\n    if (err) {\n      console.log('error:', err);\n    } else {\n      console.log(JSON.stringify(response, null, 2));\n    }\n  }\n);\n```\n\n\n### Speech to Text\n\nUse the [Speech to Text][speech_to_text] service to recognize the text from a `.wav` file.\n\n```javascript\nvar SpeechToTextV1 = require('watson-developer-cloud/speech-to-text/v1');\nvar fs = require('fs');\n\nvar speechToText = new SpeechToTextV1({\n  username: '<username>',\n  password: '<password>',\n  url: 'https://stream.watsonplatform.net/speech-to-text/api/'\n});\n\nvar params = {\n  // From file\n  audio: fs.createReadStream('./resources/speech.wav'),\n  content_type: 'audio/l16; rate=44100'\n};\n\nspeechToText.recognize(params, function(err, res) {\n  if (err)\n    console.log(err);\n  else\n    console.log(JSON.stringify(res, null, 2));\n});\n\n// or streaming\nfs.createReadStream('./resources/speech.wav')\n  .pipe(speechToText.createRecognizeStream({ content_type: 'audio/l16; rate=44100' }))\n  .pipe(fs.createWriteStream('./transcription.txt'));\n```\n\n\n### Text to Speech\n\nUse the [Text to Speech][text_to_speech] service to synthesize text into a .wav file.\n\n```js\nvar TextToSpeechV1 = require('watson-developer-cloud/text-to-speech/v1');\nvar fs = require('fs');\n\nvar textToSpeech = new TextToSpeechV1({\n  username: '<username>',\n  password: '<password>',\n  url: 'https://stream.watsonplatform.net/text-to-speech/api/'\n});\n\nvar params = {\n  text: 'Hello from IBM Watson',\n  voice: 'en-US_AllisonVoice', // Optional voice\n  accept: 'audio/wav'\n};\n\n// Synthesize speech, correct the wav header, then save to disk\n// (wav header requires a file length, but this is unknown until after the header is already generated and sent)\ntextToSpeech\n  .synthesize(params, function(err, audio) {\n    if (err) {\n      console.log(err);\n      return;\n    }\n    textToSpeech.repairWavHeader(audio);\n    fs.writeFileSync('audio.wav', audio);\n    console.log('audio.wav written with a corrected wav header');\n});\n```\n\n### Tone Analyzer\n\nUse the [Tone Analyzer][tone_analyzer] service to analyze the\nemotion, writing and social tones of a text.\n\n```js\nvar ToneAnalyzerV3 = require('watson-developer-cloud/tone-analyzer/v3');\n\nvar toneAnalyzer = new ToneAnalyzerV3({\n  username: '<username>',\n  password: '<password>',\n  version: '2016-05-19',\n  url: 'https://gateway.watsonplatform.net/tone-analyzer/api/'\n});\n\ntoneAnalyzer.tone(\n  {\n    tone_input: 'Greetings from Watson Developer Cloud!',\n    content_type: 'text/plain'\n  },\n  function(err, tone) {\n    if (err) {\n      console.log(err);\n    } else {\n      console.log(JSON.stringify(tone, null, 2));\n    }\n  }\n);\n```\n\n\n### Visual Recognition\n\nUse the [Visual Recognition][visual_recognition] service to recognize the\nfollowing picture.\n\n<img src=\"https://visual-recognition-demo.ng.bluemix.net/images/samples/5.jpg\" />\n\n```js\nvar VisualRecognitionV3 = require('watson-developer-cloud/visual-recognition/v3');\nvar fs = require('fs');\n\nvar visualRecognition = new VisualRecognitionV3({\n  api_key: '<api_key>',\n  version: '2016-05-20'\n});\n\nvar params = {\n  images_file: fs.createReadStream('./resources/car.png')\n};\n\nvisualRecognition.classify(params, function(err, res) {\n  if (err) {\n    console.log(err);\n  } else {\n    console.log(JSON.stringify(res, null, 2));\n  }\n});\n```\n\n\n## Composing services\n\n### Integration of Tone Analyzer with Conversation\nSample code for [integrating Tone Analyzer and Conversation][conversation_tone_analyzer_example] is provided in the [examples directory][examples].\n\n## Unauthenticated requests\nBy default, the library tries to use Basic Auth and will ask for `api_key` or `username` and `password` and send an `Authorization: Basic XXXXXXX`. You can avoid this by using:\n\n`use_unauthenticated`.\n\n```javascript\nvar watson = require('watson-developer-cloud');\n\nvar conversation = new watson.ConversationV1({\n  use_unauthenticated: true\n});\n```\n\n## Debug\n\nThis library relies on the `request` npm module writted by\n[request][request_github] to call the Watson Services. To debug the apps, add\n'request' to the `NODE_DEBUG` environment variable:\n\n```sh\n$ NODE_DEBUG='request' node app.js\n```\nwhere `app.js` is your Node.js file.\n\n## Tests\nRunning all the tests:\n```sh\n$ npm test\n```\n\nRunning a specific test:\n```sh\n$ mocha -g '<test name>'\n```\n\n## Open Source @ IBM\n[Find more open source projects on the IBM Github Page.](http://ibm.github.io/)\n\n## License\n\nThis library is licensed under Apache 2.0. Full license text is available in\n[COPYING][license].\n\n## Contributing\n\nSee [CONTRIBUTING](https://github.com/watson-developer-cloud/node-sdk/blob/master/.github/CONTRIBUTING.md).\n\n[conversation]: https://www.ibm.com/watson/services/conversation/\n[discovery]: https://www.ibm.com/watson/services/discovery/\n[personality_insights]: https://www.ibm.com/watson/services/personality-insights/\n[visual_recognition]: https://www.ibm.com/watson/services/visual-recognition/\n[tone_analyzer]: https://www.ibm.com/watson/services/tone-analyzer/\n[text_to_speech]: https://www.ibm.com/watson/services/text-to-speech/\n[speech_to_text]: https://www.ibm.com/watson/services/speech-to-text/\n[language_translator]: https://www.ibm.com/watson/services/language-translator/\n\n[ibm_cloud]: https://console.bluemix.net\n[npm_link]: https://www.npmjs.com/package/watson-developer-cloud\n[request_github]: https://github.com/request/request\n[dialog_migration]: https://console.bluemix.net/docs/services/conversation/index.html\n\n[examples]: https://github.com/watson-developer-cloud/node-sdk/tree/master/examples\n[document_conversion_integration_example]: https://github.com/watson-developer-cloud/node-sdk/tree/master/examples/document_conversion_integration.v1.js\n[conversation_tone_analyzer_example]: https://github.com/watson-developer-cloud/node-sdk/tree/master/examples/conversation_tone_analyzer_integration\n\n[license]: http://www.apache.org/licenses/LICENSE-2.0\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/watson-developer-cloud/node-sdk.git"
  },
  "scripts": {
    "browserify": "browserify index.js --standalone Watson --outfile dist/watson.js",
    "build": "tsc && npm run browserify && npm run minify",
    "doc": "jsdoc -c scripts/jsdoc/config.json",
    "eslint:check": "eslint . --cache",
    "eslint:config": "eslint --print-config .eslintrc.js | eslint-config-prettier-check",
    "eslint:fix": "eslint . --fix",
    "lint": "npm run eslint:check && npm run tslint:check && dependency-lint",
    "minify": "uglifyjs --compress --mangle --output dist/watson.min.js --preamble \"// Watson Developer Cloud\n// JavaScript SDK$npm_package_version\n// Generated at `date`\n// Copyright IBM ($npm_package_license)\n// $npm_package_homepage\" -- dist/watson.js",
    "precommit": "lint-staged",
    "prepublishOnly": "npm run build",
    "report-coverage": "nyc report --reporter=text-lcov > coverage.lcov && ./node_modules/.bin/codecov",
    "test": "nyc mocha test/unit/ test/integration/ && nyc report --reporter=html",
    "test-browser": "karma start --single-run",
    "test-integration": "mocha test/integration",
    "test-unit": "mocha test/unit/",
    "tslint:check": "tslint -p . -c ./tslint.json",
    "tslint:config": "tslint-config-prettier-check ./tslint.json",
    "tslint:fix": "tslint --fix -p . -c tslint.json",
    "watch": "npm run test-unit -- --watch",
    "watch-doc": "nodemon --watch ./ --ext js,tmpl,json --ignore dist/ --ignore doc/ --ignore test/ --ignore examples/ --exec npm run doc",
    "watchify": "watchify index.js --standalone Watson --outfile dist/watson.js --debug --verbose"
  },
  "version": "3.1.1"
}
